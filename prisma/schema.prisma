generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  nick      String   @unique
  nombres   String
  apellidos String
  email     String   @unique
  telefono  String
  password  String
  roleId    Int
  statusId  Int
  createdAt DateTime @default(now())

  // Relaciones
  role   Role   @relation(fields: [roleId], references: [id])
  status Status @relation(fields: [statusId], references: [id])
  mantenimientos Mantenimiento[] @relation("Mecanico") // 🔁 Relación inversa

}

model Unidad {
  id          Int      @id @default(autoincrement())
  idUnidad    String   @unique
  marcaId     Int
  modeloId    Int
  transmision String
  vim         String
  fecha       String
  capacidad   String
  combustible String
  statusId    Int
  createdAt   DateTime @default(now())

  // Relaciones
  marca  Marca  @relation(fields: [marcaId], references: [id])
  modelo Modelo @relation(fields: [modeloId], references: [id])
  status Status @relation(fields: [statusId], references: [id])
  mantenimientos Mantenimiento[] // 🔁 Relación inversa

}

model Marca {
  id       Int      @id @default(autoincrement())
  nombre   String   @unique
  unidades Unidad[]
}

model Modelo {
  id       Int      @id @default(autoincrement())
  nombre   String   @unique
  unidades Unidad[]
}

model Status {
  id           Int             @id @default(autoincrement())
  nombre       String          @unique
  unidades     Unidad[]
  personales   Personal[]
  users        User[]
  proveedores  Proveedor[]
  mantenimientos Mantenimiento[] // 👈 relación con mantenimientos
}

model Cargo {
  id         Int        @id @default(autoincrement())
  name       String
  personales Personal[]
}

model Personal {
  id        Int      @id @default(autoincrement())
  cedula    String
  nombre    String
  telefono  String
  statusId  Int
  cargoId   Int
  tag       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  status    Status   @relation(fields: [statusId], references: [id])
  cargo     Cargo    @relation(fields: [cargoId], references: [id])
  mantenimientos Mantenimiento[] @relation("OPERADOR DE RUTA") // 🔁 Relación inversa

}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] // Relación inversa para User
  menus Menu[] @relation("RoleMenus")
}

model Menu {
  id     Int    @id @default(autoincrement())
  path   String @unique
  name   String
  category String  // Valor predeterminado aquí
  roles  Role[] @relation("RoleMenus")
}
 model Proveedor {
  id        Int      @id @default(autoincrement())
  rif       String   @unique
  empresa   String
  nombre    String
  apellido  String
  telefono  String
  email     String   @unique
  statusId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Status
  status    Status   @relation(fields: [statusId], references: [id])
  // Relación con Articulos
  articulos  Articulo[]
}

model Articulo {
  id          Int        @id @default(autoincrement())
  nombre      String
  estado      String
  unidad      String
  cantidad    Int
  ubicacion   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relación con Proveedor
  proveedor   Proveedor  @relation(fields: [proveedorId], references: [id])
  proveedorId Int
}



model Mantenimiento {
  id                     Int       @id @default(autoincrement())
  unidadId               Int
  operadorId             Int
  mecanicoId             Int
  kilometraje            Int
  tipo                   String
  fechaEntrada           DateTime
  diagnostico            String
  recomendacion          String
  observacionOperador    String
  observacionSupervisor  String
  rutaUnidad             String 
  prioridad              String

  estado                 String?    // 'pendiente', 'en_proceso', 'pausado', 'finalizado'
  fechaInicio            DateTime?  
  fechaPausa             DateTime?  
  fechaFinalizacion      DateTime?  
  duracionTotal          Int?       

  unidad                 Unidad     @relation(fields: [unidadId], references: [id])
  operador               Personal   @relation("OPERADOR DE RUTA", fields: [operadorId], references: [id])
  mecanico               User       @relation("Mecanico", fields: [mecanicoId], references: [id])

  // Nueva relación con Status
  statusId               Int? 
  status                 Status?     @relation(fields: [statusId], references: [id])

  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
}



